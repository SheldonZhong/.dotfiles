#!/usr/bin/env bash

msg_exit()
{
  echo "Usage: cperf stat/record <perf-arguments> -- <commands> ..."
  echo
  echo "In C code:"
  echo "  const int ctl_fd = atoi(getenv("PERF_CTL_FD"))"
  echo "  const int ctl_ack_fd = atoi(getenv("PERF_CTL_ACK_FD"))"
  echo
  echo "  // start profiling"
  echo "  dprintf(ctl_fd, \"enable\\n\")"
  echo
  echo "  // wait for the ack from perf"
  echo "  char ack_buff[5] = {}"
  echo "  // check if ack is received"
  echo "  if(read(ctl_ack_fd, ack_buff, 4) != 4 || strcmp(ack_buff, \"ack\\n\") != 0) {"
  echo "    ..."
  echo "  }"
  echo
  echo "  ..."
  echo
  echo "  // end profiling" 
  echo "  dprint(ctl_fd, \"disable\\n\")"
  exit 1
}

case ${1} in
stat|record)
  ;;
*)
  echo >&2 "perf ${1} --control is not supported"
  msg_exit
  exit 1
esac

ctl_dir="$(mktemp -d)/"

ctl_fifo=${ctl_dir}perf_ctl.fifo
test -p ${ctl_fifo} && unlink ${ctl_fifo}
mkfifo ${ctl_fifo}
exec {PERF_CTL_FD}<>${ctl_fifo}

ctl_ack_fifo=${ctl_dir}perf_ctl_ack.fifo
test -p ${ctl_ack_fifo} && unlink ${ctl_ack_fifo}
mkfifo ${ctl_ack_fifo}
exec {PERF_CTL_ACK_FD}<>${ctl_ack_fifo}

export PERF_CTL_FD
export PERF_CTL_ACK_FD

perf $1 --delay -1 --control fd:${PERF_CTL_FD},${PERF_CTL_ACK_FD} "${@:2}"

exec {PERF_CTL_FD}<&-
unlink ${ctl_fifo}

exec {PERF_CTL_ACK_FD}<&-
unlink ${ctl_ack_fifo}

rmdir ${ctl_dir}

